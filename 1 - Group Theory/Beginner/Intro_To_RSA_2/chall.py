from Crypto.Util.number import isPrime, bytes_to_long
import secrets

with open("flag.txt", "r") as f:
    flag = f.read()
    
def genPrime(bits):
    while True:
        x = secrets.randbits(bits - 1000)
        p = (x<<1000)+1
        if isPrime(p):
            return p
        
p = genPrime(1024)
q = genPrime(1024)
e = 0x10001
N = p*p*q*q*q

m = bytes_to_long(flag.encode())
c = pow(m, e, N)

print(f"{N = }")
print(f"{c = }")
"""
N = 99058767323098132264276802451827925525332544745603430685881744977580652821117472487099985953328415858215805001618570996599978690474297870103995006672307575218212582483293351341765550498712425339193474995059309437245655862755205623197145742170094547523686387824035833435889358840643606170243228232304472987433623437714069999825516864459738005321421367942868831513492521127465864697518371694932843308787806486838906269364989367482871443017768069944950539824325485223474071732165839302129232992674143794873284240934000504776230592388732780375157362788377472413470273172396162243469332991143430019877160908110480174735001370348608004970135479272187172673291153291237469861817566478831663967906936623129032654566887825999787415897437603111777305574134517467091492942275116978870847493369043375755810652460457007038723856767004027292042970542035394164860786258992255724739953418395388279422355001377769744414695316706925785195351213685963452100582228150244656914745135538714187559286784022282380732387615886832512468486327316890803707959384837607446261971007621772858511638932588899245154336575534816342268531820594614888984680995581827025723483056679241112705128325027984265259790590753009234027059180131287177265271236847123748543670892425078513563511199021870015027627280902172285759705675273821919059863781588585490928750652458806543159996733530050726266837003060090784048005032946874275653354455690507206694736815128325405296457464965362217613150461052461807644599546019198837562143779993819231895410093456942147659735695290515912793461358593
c = 58556544128869678166582759221068083300567870239093714763816282685353782162097789207572446940754363912882970739077079617508174686166742854515474412644384136503428553392878272280292148603530641391587122494252601673322593045583443417259140833334149337673179593221587401664956962744950915649321834224553091508033303737437042320977674325450287810726815146812003357745906015328499781585666709033781056097636809314191502487191112001284815938623837204483923477360344541998809264388271441760185679235182181307148582538990029126982565707770700767295544671978948125480227218659270290117840139067744906510376834065611259637043464857470412232038189517036129100027609073142334657954650768907084125040124598249064726182479813089814275609125986145536319074032385544262818824015710792004975737614816043088783473163738967322403586901403683198767107226120981719524516125596563716865390696419978549216134351972911736972206269341420140296447796661847568225346284679680635335631648435591680213360052895963148733820775438523298719348965301271834859304021649513962744601374145373601234211774200745344985951961445496093218880532656358312413322276835511647857232972074188362687680803767968642644680839232994975351787198247363755869514146763432314508616956536878668310429089118528565260837701044195328071360357225583983480764366292328309974038348998344366725669093335052074386911770689681115854844966570756204952194260905714740883158043039112214100666051896822736087030664375061485448629825868979002490950193345688141774486582796743176549858425354706579162988546287883
"""